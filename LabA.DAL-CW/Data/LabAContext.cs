// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Lab_A.DAL.Models;
using Microsoft.EntityFrameworkCore;

namespace Lab_A.DAL.Data;

public partial class LabAContext : DbContext
{
    public LabAContext(DbContextOptions<LabAContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Analysis> Analyses { get; set; }

    public virtual DbSet<AnalysisBiomaterial> AnalysisBiomaterials { get; set; }

    public virtual DbSet<AnalysisCategory> AnalysisCategories { get; set; }

    public virtual DbSet<AnalysisCenter> AnalysisCenters { get; set; }

    public virtual DbSet<AnalysisResult> AnalysisResults { get; set; }

    public virtual DbSet<Biomaterial> Biomaterials { get; set; }

    public virtual DbSet<BiomaterialCollection> BiomaterialCollections { get; set; }

    public virtual DbSet<BiomaterialDelivery> BiomaterialDeliveries { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<Client> Clients { get; set; }

    public virtual DbSet<ClientOrder> ClientOrders { get; set; }

    public virtual DbSet<Day> Days { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Inventory> Inventories { get; set; }

    public virtual DbSet<InventoryDelivery> InventoryDeliveries { get; set; }

    public virtual DbSet<InventoryInLaboratory> InventoryInLaboratories { get; set; }

    public virtual DbSet<InventoryInOrder> InventoryInOrders { get; set; }

    public virtual DbSet<InventoryOrder> InventoryOrders { get; set; }

    public virtual DbSet<Laboratory> Laboratories { get; set; }

    public virtual DbSet<LaboratorySchedule> LaboratorySchedules { get; set; }

    public virtual DbSet<OrderAnalysis> OrderAnalyses { get; set; }

    public virtual DbSet<Position> Positions { get; set; }

    public virtual DbSet<Schedule> Schedules { get; set; }

    public virtual DbSet<Sex> Sexes { get; set; }

    public virtual DbSet<Status> Statuses { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<UserEmployee> UserEmployees { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.UseCollation("SQL_Latin1_General_CP1251_CI_AS");
        
        modelBuilder.Entity<Analysis>(entity =>
        {
            entity.HasKey(e => e.AnalysisId).HasName("PK__Analysis__5B14DE5A599B49E8");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Category).WithMany(p => p.Analyses)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_category_id");
        });

        modelBuilder.Entity<AnalysisBiomaterial>(entity =>
        {
            entity.HasKey(e => e.AnalysisBiomaterialId).HasName("PK__Analysis__2DEF0DAD33C8AEE1");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Analysis).WithMany(p => p.AnalysisBiomaterials).HasConstraintName("fk_analysis_id");

            entity.HasOne(d => d.Biomaterial).WithMany(p => p.AnalysisBiomaterials).HasConstraintName("fk_biomaterial_id");
        });

        modelBuilder.Entity<AnalysisCategory>(entity =>
        {
            entity.HasKey(e => e.AnalysisCategoryId).HasName("PK__Analysis__D4EA890F4CB34B96");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<AnalysisCenter>(entity =>
        {
            entity.HasKey(e => e.AnalysisCenterId).HasName("PK__Analysis__7911F90E329AFF8F");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.City).WithMany(p => p.AnalysisCenters)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_city_ac_id");
        });

        modelBuilder.Entity<AnalysisResult>(entity =>
        {
            entity.HasKey(e => e.AnalysisResultId).HasName("PK__Analysis__6FC2B7707E3D8A4A");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.ExecutionDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.AnalysisCenter).WithMany(p => p.AnalysisResults).HasConstraintName("fk_analysis_center_id");

            entity.HasOne(d => d.OrderAnalysis).WithMany(p => p.AnalysisResults).HasConstraintName("fk_order_analysis_id");
        });

        modelBuilder.Entity<Biomaterial>(entity =>
        {
            entity.HasKey(e => e.BiomaterialId).HasName("PK__Biomater__E29C3F474C6176CD");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<BiomaterialCollection>(entity =>
        {
            entity.HasKey(e => e.BiomaterialCollectionId).HasName("PK__Biomater__2BBC5CBCF9047321");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Biomaterial).WithMany(p => p.BiomaterialCollections).HasConstraintName("fk_biomaterial_bc_id");

            entity.HasOne(d => d.ClientOrder).WithMany(p => p.BiomaterialCollections).HasConstraintName("fk_order_bc_id");

            entity.HasOne(d => d.InventoryInLaboratory).WithMany(p => p.BiomaterialCollections).HasConstraintName("fk_biomaterial_collection_inventory_in_laboratory");
        });

        modelBuilder.Entity<BiomaterialDelivery>(entity =>
        {
            entity.HasKey(e => e.BiomaterialDeliveryId).HasName("PK__Biomater__74C47E87F2984BFE");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.DeliveryDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.AnalysisCenter).WithMany(p => p.BiomaterialDeliveries).HasConstraintName("fk_analysis_center_bd_id");

            entity.HasOne(d => d.BiomaterialCollection).WithMany(p => p.BiomaterialDeliveries).HasConstraintName("fk_biomaterial_collection_bd_id");

            entity.HasOne(d => d.Status).WithMany(p => p.BiomaterialDeliveries)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_status_bd_id");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.CityId).HasName("PK__City__031491A8F1D491F3");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Client>(entity =>
        {
            entity.HasKey(e => e.ClientId).HasName("PK__Client__BF21A424D3135C48");

            entity.HasOne(d => d.Sex).WithMany(p => p.Clients)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_sex_id");
        });

        modelBuilder.Entity<ClientOrder>(entity =>
        {
            entity.HasKey(e => e.ClientOrderId).HasName("PK__ClientOr__AB146BD8FBF8D691");

            entity.Property(e => e.BiomaterialCollectionDate).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Client).WithMany(p => p.ClientOrders).HasConstraintName("fk_client_id");

            entity.HasOne(d => d.Employee).WithMany(p => p.ClientOrders).HasConstraintName("fk_employee_id");

            entity.HasOne(d => d.Status).WithMany(p => p.ClientOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_status_id");
        });

        modelBuilder.Entity<Day>(entity =>
        {
            entity.HasKey(e => e.DayId).HasName("PK__Day__8B516ABB3E7E6380");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("PK__Employee__C52E0BA82F96FFD2");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Laboratory).WithMany(p => p.Employees).HasConstraintName("fk_laboratory_e_id");

            entity.HasOne(d => d.Position).WithMany(p => p.Employees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_position_id");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId).HasName("PK__Inventor__B59ACC49FDDB8E33");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<InventoryDelivery>(entity =>
        {
            entity.HasKey(e => e.InventoryDeliveryId).HasName("PK__Inventor__19680E8CD30FC804");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.DeliveryDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.InventoryInLaboratory).WithMany(p => p.InventoryDeliveries).HasConstraintName("fk_inventory_in_laboratory_id");

            entity.HasOne(d => d.InventoryInOrder).WithMany(p => p.InventoryDeliveries).HasConstraintName("fk_inventory_in_order_id");

            entity.HasOne(d => d.Status).WithMany(p => p.InventoryDeliveries)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_status_id_id");
        });

        modelBuilder.Entity<InventoryInLaboratory>(entity =>
        {
            entity.HasKey(e => e.InventoryInLaboratoryId).HasName("PK__Inventor__8244923960A35AE7");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Inventory).WithMany(p => p.InventoryInLaboratories).HasConstraintName("fk_inventory_iil_id");

            entity.HasOne(d => d.Laboratory).WithMany(p => p.InventoryInLaboratories).HasConstraintName("fk_laboratory_iil_id");
        });

        modelBuilder.Entity<InventoryInOrder>(entity =>
        {
            entity.HasKey(e => e.InventoryInOrderId).HasName("PK__Inventor__53CF8865B05DF8E0");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Inventory).WithMany(p => p.InventoryInOrders).HasConstraintName("fk_inventory_id");

            entity.HasOne(d => d.InventoryOrder).WithMany(p => p.InventoryInOrders).HasConstraintName("fk_inventory_order_id");
        });

        modelBuilder.Entity<InventoryOrder>(entity =>
        {
            entity.HasKey(e => e.InventoryOrderId).HasName("PK__Inventor__121BAF9E58D8B131");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
            entity.Property(e => e.OrderDate).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Status).WithMany(p => p.InventoryOrders)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_status_io_id");

            entity.HasOne(d => d.Supplier).WithMany(p => p.InventoryOrders).HasConstraintName("fk_supplier_id");
        });

        modelBuilder.Entity<Laboratory>(entity =>
        {
            entity.HasKey(e => e.LaboratoryId).HasName("PK__Laborato__3A591C74994B5A79");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.City).WithMany(p => p.Laboratories)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_city_id");
        });

        modelBuilder.Entity<LaboratorySchedule>(entity =>
        {
            entity.HasKey(e => e.LaboratoryScheduleId).HasName("PK__Laborato__D9868A0474B1C62B");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Laboratory).WithMany(p => p.LaboratorySchedules).HasConstraintName("fk_laboratory_id");

            entity.HasOne(d => d.Schedule).WithMany(p => p.LaboratorySchedules).HasConstraintName("fk_schedule_id");
        });

        modelBuilder.Entity<OrderAnalysis>(entity =>
        {
            entity.HasKey(e => e.OrderAnalysisId).HasName("PK__OrderAna__D1178634EC2ADFB9");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Analysis).WithMany(p => p.OrderAnalyses).HasConstraintName("fk_analysis_oa_id");

            entity.HasOne(d => d.ClientOrder).WithMany(p => p.OrderAnalyses).HasConstraintName("fk_client_order_oa_id");
        });

        modelBuilder.Entity<Position>(entity =>
        {
            entity.HasKey(e => e.PositionId).HasName("PK__Position__99A0E7A4053091DF");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasKey(e => e.ScheduleId).HasName("PK__Schedule__C46A8A6F75B524E3");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");

            entity.HasOne(d => d.Day).WithMany(p => p.Schedules)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_day_id");
        });

        modelBuilder.Entity<Sex>(entity =>
        {
            entity.HasKey(e => e.SexId).HasName("PK__Sex__989F2F4DBC5D930D");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Status>(entity =>
        {
            entity.HasKey(e => e.StatusId).HasName("PK__Status__3683B53147798B97");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.SupplierId).HasName("PK__Supplier__6EE594E887822B5C");

            entity.Property(e => e.CreateDatetime).HasDefaultValueSql("(getdate())");
        });

        modelBuilder.Entity<UserEmployee>(entity =>
        {
            entity.HasKey(e => e.UserEmployeeId).HasName("PK__UserEmpl__F4F2EDAF67041CF8");
        });

        modelBuilder.Entity<UserEmployee>()
            .HasOne(ue => ue.Employee)
            .WithMany(e => e.UserEmployees)
            .HasForeignKey(ue => ue.EmployeeId)
            .OnDelete(DeleteBehavior.ClientSetNull);

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}